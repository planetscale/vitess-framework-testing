#!/usr/bin/env python3

import subprocess
import sys

template = """
  - key: test-${SERVICE}-${FRAMEWORK_SLUG}
    label: "Test ${FRAMEWORK} against ${SERVER} ${DIALECT}"
    depends_on: ${DEPENDS_ON}
    plugins:
      - docker-compose#v3.7.0:
          config:
            - .buildkite/docker-compose.${SERVICE}.yml
            - .buildkite/docker-compose.yml
          run: test
          env:
            FRAMEWORK: "${FRAMEWORK}"
            VT_USERNAME: root
            VT_PASSWORD: root
            VT_DATABASE: testing
            VT_HOST: db
            VT_PORT: 3306
            VT_NUM_SHARDS: ${NUM_SHARDS}
            VT_DIALECT: mysql${DIALECT_SHORT}
"""
def generate_step(server, dialect, num_shards, depends_on, framework):
    service = server.lower() + dialect.replace('.', '') + ('sharded' if num_shards > 1 else '')
    framework_slug = framework.replace('/', ':')
    step = template.replace('${SERVER}', server).replace('${DIALECT}', dialect).replace('${DIALECT_SHORT}', dialect.replace('.', '')).replace('${SERVICE}', service).replace('${NUM_SHARDS}', str(num_shards)).replace('${FRAMEWORK}', framework).replace('${FRAMEWORK_SLUG}', framework_slug)
    if(depends_on is None):
        step = '\n'.join([line for line in step.split('\n') if 'depends_on' not in line])
    else:
        step = step.replace('${DEPENDS_ON}', 'test-' + depends_on + '-' + framework_slug)
    return step

agent = subprocess.Popen(['buildkite-agent', 'meta-data', 'get', 'changed-frameworks'], stdout = subprocess.PIPE) # TODO:  changed-frameworks vs frameworks based on env
result = ['  - wait']
for f in agent.stdout:
    f = f.decode('ascii').strip()
    result.append(generate_step('MySQL', '5.7', 1, None, f))
    result.append(generate_step('MySQL', '8.0', 1, None, f))
    result.append(generate_step('vttestserver', '5.7', 1, 'mysql57', f))
    result.append(generate_step('vttestserver', '8.0', 1, 'mysql80', f))
    result.append(generate_step('vttestserver', '5.7', 2, 'vttestserver57', f))
    result.append(generate_step('vttestserver', '8.0', 2, 'vttestserver80', f))
result = '\n'.join(result)

print(result)
agent = subprocess.run(['buildkite-agent', 'pipeline', 'upload'], input = result.encode('ascii'))

