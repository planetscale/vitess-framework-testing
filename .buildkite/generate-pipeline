#!/usr/bin/env python3

import os
import subprocess
import sys

compose_template = """
version: '3.8'
services:
  test:
    image: "gcr.io/planetscale-vitess-testing/frameworks/${FRAMEWORK}"
    depends_on:
      db:
        condition: service_healthy
    links:
      - db
"""

build_template = """
  - key: build-${FRAMEWORK_SLUG}
    label: "Build test container image for ${FRAMEWORK}"
    command: ./.buildkite/build-image '${FRAMEWORK}'
"""
def generate_build_step(framework):
    framework_slug = framework.replace('/', '_').replace(':', '_')
    step = build_template.replace('${FRAMEWORK}', framework).replace('${FRAMEWORK_SLUG}', framework_slug)
    return step

test_template = """
  - key: test-${SERVICE}-${FRAMEWORK_SLUG}
    label: "Test ${FRAMEWORK} against ${SERVER} ${DIALECT}"
    depends_on: ${DEPENDS_ON}
    plugins:
      - docker-compose#v3.7.0:
          config:
            - .buildkite/docker-compose.${SERVICE}.yml
            - .buildkite/gen/docker-compose.${FRAMEWORK_SLUG}.yml
          run: test
          env:
            - FRAMEWORK=${FRAMEWORK}
            - VT_USERNAME=root
            - VT_PASSWORD=root
            - VT_DATABASE=testing
            - VT_HOST=db
            - VT_PORT=3306
            - VT_NUM_SHARDS=${NUM_SHARDS}
            - VT_DIALECT=mysql${DIALECT_SHORT}
"""
def generate_test_step(server, dialect, num_shards, depends_on, framework):
    service = server.lower() + dialect.replace('.', '') + ('sharded' if num_shards > 1 else '')
    framework_slug = framework.replace('/', '_').replace(':', '_')
    step = test_template.replace('${SERVER}', server).replace('${DIALECT}', dialect).replace('${DIALECT_SHORT}', dialect.replace('.', '')).replace('${SERVICE}', service).replace('${NUM_SHARDS}', str(num_shards))
    step = step.replace('${FRAMEWORK}', framework).replace('${FRAMEWORK_SLUG}', framework_slug).replace('${DEPENDS_ON}', depends_on + '-' + framework_slug)
    return step

push_template = """
  - key: push-${FRAMEWORK_SLUG}
    label: "Push container image for ${FRAMEWORK}"
    command: ./.buildkite/push-image '${FRAMEWORK}'
    depends_on:
      - test-mysql57-${FRAMEWORK_SLUG}
      - test-mysql80-${FRAMEWORK_SLUG}
"""
def generate_push_step(framework):
    framework_slug = framework.replace('/', '_').replace(':', '_')
    step = push_template.replace('${FRAMEWORK}', framework).replace('${FRAMEWORK_SLUG}', framework_slug)
    return step

def read(path):
    f = open(path, 'r')
    return f.read()

def write(path, string):
    print('--- writing ', path)
    f = open(path, 'w')
    f.write(string)

try:
    os.mkdir(".buildkite/gen")
except FileExistsError:
    pass

mode = 'pull request'
if(os.environ['BUILDKITE_BRANCH'] == 'buildkite'):
    mode = 'master commit'

agent = subprocess.Popen(['buildkite-agent', 'meta-data', 'get', 'changed-frameworks'], stdout = subprocess.PIPE) # TODO:  changed-frameworks vs frameworks based on env
result = ['  - wait']
for line in agent.stdout:
    line = line.decode('ascii').strip()
    write('.buildkite/gen/docker-compose.' + line.replace('/', '_').replace(':', '_') + '.yml', compose_template.replace('${FRAMEWORK}', line))
    if(mode == 'pull request'):
        result.append(generate_build_step(line))
        result.append(generate_test_step('MySQL', '5.7', 1, 'build', line))
        result.append(generate_test_step('MySQL', '8.0', 1, 'build', line))
        result.append(generate_test_step('vttestserver', '5.7', 1, 'test-mysql57', line))
        result.append(generate_test_step('vttestserver', '8.0', 1, 'test-mysql80', line))
        result.append(generate_test_step('vttestserver', '5.7', 2, 'test-vttestserver57', line))
        result.append(generate_test_step('vttestserver', '8.0', 2, 'test-vttestserver80', line))
    elif(mode == 'master commit'):
        result.append(generate_build_step(line))
        result.append(generate_test_step('MySQL', '5.7', 1, 'build', line))
        result.append(generate_test_step('MySQL', '8.0', 1, 'build', line))
        result.append(generate_push_step(line))
    # TODO:  elif(mode == 'manual trigger'):
result = '\n'.join(result)

print(result)
agent = subprocess.run(['buildkite-agent', 'pipeline', 'upload'], input = result.encode('ascii'))

